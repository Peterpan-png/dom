{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChile","empty","childNodes","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    //创建结点封装\r\n    create(string) {\r\n        //创建template节点能够包含标签中套标签的情况\r\n        const container = document.createElement(\"template\")\r\n            //插入到HTML中并通过trim删除字符串两端空白字符\r\n        container.innerHTML = string.trim()\r\n        return container.content.firstChild\r\n    },\r\n\r\n    //在指定节点后面添加一个节点\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.nextSibling)\r\n    },\r\n\r\n    //在指定节点前面添加一个节点\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node)\r\n    },\r\n\r\n    //在父节点里添加一个子节点\r\n    append(parent, node) {\r\n        parent.appendChild(node)\r\n    },\r\n\r\n    //添加父节点\r\n    wrap(node, parent) {\r\n        dom.before(node, parent)\r\n        dom.append(parent, node)\r\n    },\r\n\r\n    //删除节点\r\n    remove(node) {\r\n        node.parentNode.removeChile(node)\r\n        return node\r\n    },\r\n\r\n    //删除节点还删除附属子节点\r\n    empty(node) {\r\n        //等同于const childNodes = node.childNodes\r\n        const { childNodes } = node\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n\r\n    //用于读写属性\r\n    attr(node, name, value) { //重载\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    //修改文本内容\r\n    text(node, string) { //适配\r\n        //当传两个参数时，进行改\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) {\r\n                //适配ie\r\n                node.innerText = string\r\n            } else {\r\n                //适配其他浏览器\r\n                node.textContent = string\r\n            }\r\n            //传一个参数时进行查\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText\r\n            } else {\r\n                //适配其他浏览器\r\n                return node.textContent\r\n            }\r\n        }\r\n    },\r\n    //用于读写html属性\r\n    html(node, string) {\r\n        //length ====2 时 修改html属性\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n                //length === 1时，查一遍\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n    //用于修改样式\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            //dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                //dom.style(div,'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                //dom.style(div,{color:'red'})\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class: {\r\n        //class属性增加\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        //class删除\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n\r\n        },\r\n        //class查看属性\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    //用于事件监听\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    //用于删除事件监听\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    //用于获取标签或标签们  \r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    //用于获取父元素\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    //用于获取子元素\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    //用于获取通级元素\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n    },\r\n    //用于获取下级元素\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    //用于获取上级元素\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    // each(nodeList, fn) {\r\n    //     for (let i = 0; i < nodeList.length; i++) {\r\n    //         fn.call(null, nodeList[i])\r\n    //     }\r\n    // },\r\n    //用于获取遍历所有节点\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    //用于获取节点的下标\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n};"]}